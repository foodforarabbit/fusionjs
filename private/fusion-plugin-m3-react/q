if &compatible
  set nocompatible
endif

set runtimepath+=/Users/giancarloanemone/vim/repos/github.com/Shougo/dein.vim

" set background=dark

" Remapping leader
let mapleader = " "

let g:javascript_plugin_flow = 1
let g:jsx_ext_required = 0
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 1
let g:ale_lint_on_text_changed = 0
let g:ale_completion_enabled = 1
let g:ale_fixers = {
\   'javascript': ['eslint'],
\}
let g:ale_sign_error = '✖︎'
let g:ale_sign_offset = 1000000
let g:ale_sign_warning = '⚡︎'
let g:ale_statusline_format = ['❌ %d', '⚡︎%d', '']

call dein#begin('/Users/giancarloanemone/vim/dein')
call dein#add('Shougo/dein.vim')
call dein#add('ap/vim-buftabline')
call dein#add('Shougo/denite.nvim')
call dein#add('w0rp/ale')
call dein#add('tomtom/tcomment_vim', {'on_map': 'gc', 'on_cmd' : 'TComment'})
call dein#add('tpope/vim-repeat', {'on_map' : '.'}) 
call dein#add('tpope/vim-surround', {'on_map': {'n' : ['cs', 'ds', 'ys'], 'x' : 'S'}, 'depends' : 'vim-repeat'})
" call dein#add('pangloss/vim-javascript', { 'on_ft' : 'js'})
call dein#add('jelera/vim-javascript-syntax', { 'on_ft': 'js' })
call dein#add('scrooloose/nerdtree')
"call dein#add('wellle/targets.vim')
"call dein#add('kana/vim-textobj-entire', {'on_map': {'xo' : ['ie', 'ae']}}) 
"call dein#add('SirVer/ultisnips' ,  {'on_map' : { 'i' : ['<TAB>'] }})
"call dein#add('tpope/vim-fugitive', { 'on_cmd': [ 'Git', 'Gstatus', 'Gwrite', 'Glog', 'Gcommit', 'Gblame', 'Ggrep', 'Gdiff', ] })
"call dein#add('justinmk/vim-sneak', {'on_map' : ['<Plug>SneakLabel_s', '<Plug>SneakLabel_S']})
"call dein#add('kien/ctrlp.vim', { 'on_cmd' : 'CtrlPMRUFiles' })
"call dein#add('qpkorr/vim-renamer', { 'on_cmd': 'Renamer'})
"call dein#add('godlygeek/tabular', { 'on_cmd' : [ 'Tab', 'Tabularize' ] , 'augroup' : 'tabular' })
"call dein#add('tommcdo/vim-exchange', { 'on_map' : {'n' : 'cx', 'x' : 'X' } } ) 
"call dein#add('Raimondi/delimitMate', {'on_map' : { 'i' : ['(', '[', '{' ] }})
"call dein#add('terryma/vim-multiple-cursors', { 'on_map' : { 'n' : ['<C-n>', '<C-p>'], 'x' : '<C-n>'}}) 
"call dein#add('kana/vim-textobj-user')
"call dein#add('glts/vim-textobj-comment', {'on_map' :['<Plug>(textobj-comment-a)', '<Plug>(textobj-comment-i)', '<Plug>(textobj-comment-i)', '<Plug>(textobj-comment-big-a)']}) 
"call dein#add('coderifous/textobj-word-column.vim', {'on_map': {'xo' : ['ic', 'ac']}}) 
"call dein#add('kana/vim-textobj-indent', {'on_map': {'xo' : ['ii', 'ai']}}) 
"call dein#add('zirrostig/vim-schlepp', { 'on_map' :  ['<Plug>SchleppIndentDown', '<Plug>SchleppIndentUp', '<Plug>SchleppLeft', '<Plug>SchleppRight']}) 
"call dein#add('osyo-manga/vim-over', { 'on_cmd' : 'OverCommandLine' }) 
"call dein#add('bps/vim-textobj-python', { 'on_ft' : 'python' }) 
"call dein#add('tmhedberg/matchit', { 'on_ft' : 'html' }) 
call dein#end()
call dein#save_state()

"Default highlight color for current line
hi CursorLine cterm=none ctermbg=Black
autocmd BufEnter * hi CursorLine ctermbg=black
"Better in denite without this
autocmd FileType denite hi CursorLine ctermbg=none

"Only highlight the current line in the current window
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END

set clipboard=unnamedplus

call denite#custom#alias('source', 'file_rec/git', 'file_rec')
call denite#custom#var('file_rec/git', 'command',
      \ ['git', 'ls-files', '-co', '--exclude-standard'])
" Escape go to normal mode from insert mode in denite
call denite#custom#map(
  \ 'insert',
  \ '<esc>',
  \ '<denite:enter_mode:normal>',
  \ 'noremap'
  \)
" Keep escape the same in normal mode
call denite#custom#map(
  \ 'normal',
  \ '<esc>',
  \ '<denite:enter_mode:normal>',
  \ 'noremap'
  \)
" Quit via leader q
call denite#custom#map(
  \ 'normal',
  \ '<leader>q',
  \ '<denite:quit>',
  \ 'noremap'
  \)
call denite#custom#map(
  \ 'normal',
  \ 's',
  \ '<denite:do_action:vsplit>',
  \ 'noremap'
  \)
call denite#custom#map(
  \ 'normal',
  \ 'h',
  \ '<denite:do_action:split>',
  \ 'noremap'
  \)
nnoremap <C-p> :Denite file_rec/git<cr>
nnoremap <C-b> :Denite buffer<cr>
" Open file in new v split
nnoremap <leader>gl :vs<cr>gf
nnoremap <leader>gj :sp<cr>gf<C-w>r
nnoremap <leader>gk :sp<cr>gf
" Clear search highlights
nnoremap <leader>n :noh<cr>

nmap <leader>tr :NERDTree<cr>
nmap <leader>show :NERDTreeFind<cr>

" Helpful leader remaps
nnoremap <leader>w :w<cr>
nnoremap <leader>fq :q!<cr>

" Terminal emulation remaps
nnoremap <leader>tm :vsplit term://zsh<cr>
nnoremap <leader>ts :split term://zsh<cr>
nnoremap <leader>term :terminal<cr>
nnoremap <leader>top :split term://top<cr>
nnoremap <leader>tt :buffer term<cr>
tnoremap <C-a> <C-\><C-n>

" Enter insert mode when entereing terminal mode
autocmd BufWinEnter,WinEnter term://* startinsert
" Enter normal mode when leaving terminal mode
autocmd BufLeave term://* stopinsert

" Allows .js extension to be added on to file when trying `gf`
set suffixesadd=.js

" vsplit on right
set splitright

set autoindent
set smartindent

" Line numbers
set number

function! Move(direction)
  let nr = winnr()
  execute 'wincmd ' . a:direction
  if nr == winnr()
    if a:direction == 'h'
      bp
    elseif a:direction == 'l'
      bn
    endif
  endif
endfunction

function! NumBuffers()
  return len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))
endfunction

function! DeleteBuffer()
  setl bufhidden=delete
  bnext
  setl bufhidden=hide
endfunction

function! SafeClose()
  let num_windows = winnr('$')
  let num_buffers = NumBuffers()
  if num_windows == 1 && num_buffers > 1
    call DeleteBuffer()
  elseif num_windows == 1
    if 1 == confirm("Quit Vim?", "&Yes\n&No", 2)
      quit
    endif
  else
    close
  endif
endfunction

" NOTE
" Mapping <C-h> in insert mode doesn't work because it runs backspace
" Iterm is set up to send <C-e> hex code on <C-h>
" ---------------------------------------------------
" Remaping for split navigations
nnoremap <C-e> :call Move('h')<cr>
nnoremap <C-l> :call Move('l')<cr>
nnoremap <C-k> :call Move('k')<cr>
nnoremap <C-j> :call Move('j')<cr>
tnoremap <C-e> <C-\><C-n>:call Move('h')<cr>
tnoremap <C-l> <C-\><C-n>:call Move('l')<cr>
tnoremap <C-k> <C-\><C-n>:call Move('k')<cr>
tnoremap <C-j> <C-\><C-n>:call Move('j')<cr>
inoremap <C-e> <esc>:call Move('h')<cr>
inoremap <C-l> <esc>:call Move('l')<cr>
inoremap <C-k> <esc>:call Move('k')<cr>
inoremap <C-j> <esc>:call Move('j')<cr>

set bufhidden=hide
autocmd TermOpen * set bufhidden=hide
autocmd TermOpen * setlocal nonumber
nnoremap <leader>q :update\|call SafeClose()<cr>
nnoremap <C-q> :update\|call SafeClose()<cr>
tnoremap <C-q> <C-\><C-n>:update\|call SafeClose()<cr>

filetype plugin indent on
syntax enable
