// @flow

/* istanbul ignore file */
//@generated
// Generated by thrift2flow at Thu Jan 24 2019 13:33:54 GMT-0500 (EST)
import Long from 'long';
import type {OptionsType} from '@uber/typed-rpc-cli';
import type {Context} from 'fusion-core';
import type {GraphQLResolveInfo} from 'graphql';

export type UUIDType = string;
export type DateTimeType = Buffer;
export type PointsType = Long;
export type NationalIdTypeType = 'SPANISH_ID_OR_PASSPORT';
export const NationalIdTypeValueMap = {
  SPANISH_ID_OR_PASSPORT: 1,
};
export type UnauthorizedReasonType =
  | 'PERMISSION_DENIED'
  | 'INSUFFICIENT_PRIVILEGE'
  | 'USER_BANNED'
  | 'INVALID_UUID'
  | 'SERVICE_NOT_WHITELISTED'
  | 'MOBILE_IN_USE';
export const UnauthorizedReasonValueMap = {
  PERMISSION_DENIED: 1,
  INSUFFICIENT_PRIVILEGE: 1,
  USER_BANNED: 2,
  INVALID_UUID: 3,
  SERVICE_NOT_WHITELISTED: 4,
  MOBILE_IN_USE: 5,
};
export type AddressTypeType = 'PARTNER_INPUT_ADDRESS';
export const AddressTypeValueMap = {
  PARTNER_INPUT_ADDRESS: 1,
};
export type UserTypeType =
  | 'FLEET'
  | 'FREIGHT_CARRIER'
  | 'FREIGHT_DRIVER'
  | 'FREIGHT_FACTORING_COMPANY'
  | 'UNUSED_5'
  | 'UNUSED_6'
  | 'UNUSED_7'
  | 'UNUSED_8'
  | 'UNUSED_9'
  | 'UNUSED_10'
  | 'UNUSED_11'
  | 'UNUSED_12'
  | 'UNUSED_13'
  | 'UNUSED_14'
  | 'UNUSED_15'
  | 'UNUSED_16'
  | 'UNUSED_17'
  | 'UNUSED_18'
  | 'UNUSED_19'
  | 'UNUSED_20'
  | 'UNUSED_21'
  | 'UNUSED_22'
  | 'UNUSED_23'
  | 'UNUSED_24'
  | 'UNUSED_25'
  | 'UNUSED_26'
  | 'UNUSED_27'
  | 'UNUSED_28'
  | 'UNUSED_29'
  | 'UNUSED_30'
  | 'UNUSED_31'
  | 'UNUSED_32';
export const UserTypeValueMap = {
  FLEET: 1,
  FREIGHT_CARRIER: 2,
  FREIGHT_DRIVER: 3,
  FREIGHT_FACTORING_COMPANY: 4,
  UNUSED_5: 5,
  UNUSED_6: 6,
  UNUSED_7: 7,
  UNUSED_8: 8,
  UNUSED_9: 9,
  UNUSED_10: 10,
  UNUSED_11: 11,
  UNUSED_12: 12,
  UNUSED_13: 13,
  UNUSED_14: 14,
  UNUSED_15: 15,
  UNUSED_16: 16,
  UNUSED_17: 17,
  UNUSED_18: 18,
  UNUSED_19: 19,
  UNUSED_20: 20,
  UNUSED_21: 21,
  UNUSED_22: 22,
  UNUSED_23: 23,
  UNUSED_24: 24,
  UNUSED_25: 25,
  UNUSED_26: 26,
  UNUSED_27: 27,
  UNUSED_28: 28,
  UNUSED_29: 29,
  UNUSED_30: 30,
  UNUSED_31: 31,
  UNUSED_32: 32,
};
export type DriverCompensationTypeType = 'HOURLY' | 'COMMISSION';
export const DriverCompensationTypeValueMap = {
  HOURLY: 1,
  COMMISSION: 2,
};
export type PartnerStatusType = 'APPLIED' | 'ACTIVE' | 'REJECTED' | 'INACTIVE';
export const PartnerStatusValueMap = {
  APPLIED: 1,
  ACTIVE: 2,
  REJECTED: 3,
  INACTIVE: 4,
};
export type EntityAlreadyExistsType = {|
  message?: string,
  existingUuid?: UUIDType,
|};
export type EntityNotFoundType = {|
  message?: string,
|};
export type UnauthorizedType = {|
  message?: string,
  reason?: UnauthorizedReasonType,
|};
export type IndexingErrorType = {|
  message?: string,
|};
export type AuthenticationErrorType = {|
  message?: string,
|};
export type RateLimitedErrorType = {|
  message?: string,
|};
export type ValidationErrorType = {|
  messages?: {
    [string]: string,
  },
|};
export type UserMissingArgumentType = {|
  message?: string,
|};
export type UserDataConstraintClientExceptionType = {|
  message?: string,
|};
export type ThirdPartyAPIErrorType = {|
  message?: string,
|};
export type AccountMissingMobileNumberType = {||};
export type InternalServerErrorType = {|
  message?: string,
|};
export type UserRoleType = 'CLIENT' | 'DRIVER' | 'PARTNER' | 'MERCHANT';
export const UserRoleValueMap = {
  CLIENT: 1,
  DRIVER: 1,
  PARTNER: 2,
  MERCHANT: 3,
};
export type DriverStatusType =
  | 'ACTIVE'
  | 'PENDING_ONBOARDING'
  | 'READY_TO_ONBOARDING'
  | 'ACCEPTED'
  | 'INTERVIEWED'
  | 'PENDING_INTERVIEW'
  | 'READY_TO_INTERVIEW'
  | 'APPLIED'
  | 'WAITLISTED'
  | 'REJECTED'
  | 'WAITLISTED_FOR_MISSING_DOCS'
  | 'WAITLISTED_AUTO_REACTIVATION';
export const DriverStatusValueMap = {
  ACTIVE: 1,
  PENDING_ONBOARDING: 1,
  READY_TO_ONBOARDING: 2,
  ACCEPTED: 3,
  INTERVIEWED: 4,
  PENDING_INTERVIEW: 5,
  READY_TO_INTERVIEW: 6,
  APPLIED: 7,
  WAITLISTED: 8,
  REJECTED: 9,
  WAITLISTED_FOR_MISSING_DOCS: 10,
  WAITLISTED_AUTO_REACTIVATION: 11,
};
export type DriverFlowTypeType =
  | 'BLACK'
  | 'TAXI'
  | 'P2P'
  | 'OTHER'
  | 'SUBURBS'
  | 'UBERX'
  | 'REMOTE'
  | 'SUV'
  | 'LOGISTICS'
  | 'UBER_EATS'
  | 'COMMUTE'
  | 'MOTORBIKE'
  | 'ONBOARDER'
  | 'TEMPORARY'
  | 'ATC'
  | 'UBERFREIGHT'
  | 'FLEET'
  | 'FLEETOPERATOR'
  | 'UBER_LITE'
  | 'HOURLY_RENTALS'
  | 'NEMOEARNER'
  | 'UNUSED_6'
  | 'UNUSED_7'
  | 'UNUSED_8'
  | 'UNUSED_9'
  | 'UNUSED_10'
  | 'UNUSED_11'
  | 'UNUSED_12'
  | 'UNUSED_13'
  | 'UNUSED_14'
  | 'UNUSED_15'
  | 'UNUSED_16'
  | 'UNUSED_17'
  | 'UNUSED_18'
  | 'UNUSED_19'
  | 'UNUSED_20'
  | 'UNUSED_21'
  | 'UNUSED_22'
  | 'UNUSED_23'
  | 'UNUSED_24'
  | 'UNUSED_25'
  | 'UNUSED_26'
  | 'UNUSED_27'
  | 'UNUSED_28'
  | 'UNUSED_29'
  | 'UNUSED_30'
  | 'UNUSED_31'
  | 'UNUSED_32'
  | 'UNUSED_33'
  | 'UNUSED_34'
  | 'UNUSED_35'
  | 'UNUSED_36'
  | 'UNUSED_37'
  | 'UNUSED_38'
  | 'UNUSED_39'
  | 'UNUSED_40'
  | 'UNUSED_41'
  | 'UNUSED_42'
  | 'UNUSED_43'
  | 'UNUSED_44'
  | 'UNUSED_45'
  | 'UNUSED_46'
  | 'UNUSED_47'
  | 'UNUSED_48'
  | 'UNUSED_49'
  | 'UNUSED_50'
  | 'UNUSED_51'
  | 'UNUSED_52'
  | 'UNUSED_53'
  | 'UNUSED_54'
  | 'UNUSED_55'
  | 'UNUSED_56'
  | 'UNUSED_57'
  | 'UNUSED_58'
  | 'UNUSED_59'
  | 'UNUSED_60'
  | 'UNUSED_61'
  | 'UNUSED_62'
  | 'UNUSED_63'
  | 'UNUSED_64'
  | 'UNUSED_65'
  | 'UNUSED_66'
  | 'UNUSED_67'
  | 'UNUSED_68'
  | 'UNUSED_69'
  | 'UNUSED_70'
  | 'UNUSED_71'
  | 'UNUSED_72'
  | 'UNUSED_73'
  | 'UNUSED_74'
  | 'UNUSED_75'
  | 'UNUSED_76'
  | 'UNUSED_77'
  | 'UNUSED_78'
  | 'UNUSED_79'
  | 'UNUSED_80'
  | 'UNUSED_81'
  | 'UNUSED_82'
  | 'UNUSED_83'
  | 'UNUSED_84'
  | 'UNUSED_85'
  | 'UNUSED_86'
  | 'UNUSED_87'
  | 'UNUSED_88'
  | 'UNUSED_89'
  | 'UNUSED_90'
  | 'UNUSED_91'
  | 'UNUSED_92'
  | 'UNUSED_93'
  | 'UNUSED_94'
  | 'UNUSED_95'
  | 'UNUSED_96'
  | 'UNUSED_97'
  | 'UNUSED_98'
  | 'UNUSED_99'
  | 'UNUSED_100'
  | 'UNUSED_101'
  | 'UNUSED_102'
  | 'UNUSED_103'
  | 'UNUSED_104'
  | 'UNUSED_105'
  | 'UNUSED_106'
  | 'UNUSED_107'
  | 'UNUSED_108'
  | 'UNUSED_109'
  | 'UNUSED_110'
  | 'UNUSED_111'
  | 'UNUSED_112'
  | 'UNUSED_113'
  | 'UNUSED_114'
  | 'UNUSED_115'
  | 'UNUSED_116'
  | 'UNUSED_117'
  | 'UNUSED_118'
  | 'UNUSED_119'
  | 'UNUSED_120'
  | 'UNUSED_121'
  | 'UNUSED_122'
  | 'UNUSED_123'
  | 'UNUSED_124'
  | 'UNUSED_125'
  | 'UNUSED_126'
  | 'UNUSED_127'
  | 'UNUSED_128'
  | 'UNUSED_129'
  | 'UNUSED_130'
  | 'UNUSED_131'
  | 'UNUSED_132'
  | 'UNUSED_133'
  | 'UNUSED_134'
  | 'UNUSED_135'
  | 'UNUSED_136'
  | 'UNUSED_137'
  | 'UNUSED_138'
  | 'UNUSED_139'
  | 'UNUSED_140'
  | 'UNUSED_141'
  | 'UNUSED_142'
  | 'UNUSED_143'
  | 'UNUSED_144'
  | 'UNUSED_145'
  | 'UNUSED_146'
  | 'UNUSED_147'
  | 'UNUSED_148'
  | 'UNUSED_149'
  | 'UNUSED_150'
  | 'UNUSED_151'
  | 'UNUSED_152'
  | 'UNUSED_153'
  | 'UNUSED_154'
  | 'UNUSED_155'
  | 'UNUSED_156'
  | 'UNUSED_157'
  | 'UNUSED_158'
  | 'UNUSED_159'
  | 'UNUSED_160'
  | 'UNUSED_161'
  | 'UNUSED_162'
  | 'UNUSED_163'
  | 'UNUSED_164'
  | 'UNUSED_165'
  | 'UNUSED_166'
  | 'UNUSED_167'
  | 'UNUSED_168'
  | 'UNUSED_169'
  | 'UNUSED_170'
  | 'UNUSED_171'
  | 'UNUSED_172'
  | 'UNUSED_173'
  | 'UNUSED_174'
  | 'UNUSED_175'
  | 'UNUSED_176'
  | 'UNUSED_177'
  | 'UNUSED_178'
  | 'UNUSED_179'
  | 'UNUSED_180'
  | 'UNUSED_181'
  | 'UNUSED_182'
  | 'UNUSED_183'
  | 'UNUSED_184'
  | 'UNUSED_185'
  | 'UNUSED_186'
  | 'UNUSED_187'
  | 'UNUSED_188'
  | 'UNUSED_189'
  | 'UNUSED_190'
  | 'UNUSED_191'
  | 'UNUSED_192'
  | 'UNUSED_193'
  | 'UNUSED_194'
  | 'UNUSED_195'
  | 'UNUSED_196'
  | 'UNUSED_197'
  | 'UNUSED_198'
  | 'UNUSED_199'
  | 'UNUSED_200';
export const DriverFlowTypeValueMap = {
  BLACK: 1,
  TAXI: 2,
  P2P: 3,
  OTHER: 4,
  SUBURBS: 5,
  UBERX: 6,
  REMOTE: 7,
  SUV: 40,
  LOGISTICS: 41,
  UBER_EATS: 141,
  COMMUTE: 142,
  MOTORBIKE: 143,
  ONBOARDER: 144,
  TEMPORARY: 209,
  ATC: 1000,
  UBERFREIGHT: 1001,
  FLEET: 1002,
  FLEETOPERATOR: 1003,
  UBER_LITE: 1004,
  HOURLY_RENTALS: 1005,
  NEMOEARNER: 1006,
  UNUSED_6: 1007,
  UNUSED_7: 1008,
  UNUSED_8: 1009,
  UNUSED_9: 1010,
  UNUSED_10: 1011,
  UNUSED_11: 1012,
  UNUSED_12: 1013,
  UNUSED_13: 1014,
  UNUSED_14: 1015,
  UNUSED_15: 1016,
  UNUSED_16: 1017,
  UNUSED_17: 1018,
  UNUSED_18: 1019,
  UNUSED_19: 1020,
  UNUSED_20: 1021,
  UNUSED_21: 1022,
  UNUSED_22: 1023,
  UNUSED_23: 1024,
  UNUSED_24: 1025,
  UNUSED_25: 1026,
  UNUSED_26: 1027,
  UNUSED_27: 1028,
  UNUSED_28: 1029,
  UNUSED_29: 1030,
  UNUSED_30: 1031,
  UNUSED_31: 1032,
  UNUSED_32: 1033,
  UNUSED_33: 1034,
  UNUSED_34: 1035,
  UNUSED_35: 1036,
  UNUSED_36: 1037,
  UNUSED_37: 1038,
  UNUSED_38: 1039,
  UNUSED_39: 1040,
  UNUSED_40: 1041,
  UNUSED_41: 1042,
  UNUSED_42: 1043,
  UNUSED_43: 1044,
  UNUSED_44: 1045,
  UNUSED_45: 1046,
  UNUSED_46: 1047,
  UNUSED_47: 1048,
  UNUSED_48: 1049,
  UNUSED_49: 1050,
  UNUSED_50: 1051,
  UNUSED_51: 1052,
  UNUSED_52: 1053,
  UNUSED_53: 1054,
  UNUSED_54: 1055,
  UNUSED_55: 1056,
  UNUSED_56: 1057,
  UNUSED_57: 1058,
  UNUSED_58: 1059,
  UNUSED_59: 1060,
  UNUSED_60: 1061,
  UNUSED_61: 1062,
  UNUSED_62: 1063,
  UNUSED_63: 1064,
  UNUSED_64: 1065,
  UNUSED_65: 1066,
  UNUSED_66: 1067,
  UNUSED_67: 1068,
  UNUSED_68: 1069,
  UNUSED_69: 1070,
  UNUSED_70: 1071,
  UNUSED_71: 1072,
  UNUSED_72: 1073,
  UNUSED_73: 1074,
  UNUSED_74: 1075,
  UNUSED_75: 1076,
  UNUSED_76: 1077,
  UNUSED_77: 1078,
  UNUSED_78: 1079,
  UNUSED_79: 1080,
  UNUSED_80: 1081,
  UNUSED_81: 1082,
  UNUSED_82: 1083,
  UNUSED_83: 1084,
  UNUSED_84: 1085,
  UNUSED_85: 1086,
  UNUSED_86: 1087,
  UNUSED_87: 1088,
  UNUSED_88: 1089,
  UNUSED_89: 1090,
  UNUSED_90: 1091,
  UNUSED_91: 1092,
  UNUSED_92: 1093,
  UNUSED_93: 1094,
  UNUSED_94: 1095,
  UNUSED_95: 1096,
  UNUSED_96: 1097,
  UNUSED_97: 1098,
  UNUSED_98: 1099,
  UNUSED_99: 1100,
  UNUSED_100: 1101,
  UNUSED_101: 1102,
  UNUSED_102: 1103,
  UNUSED_103: 1104,
  UNUSED_104: 1105,
  UNUSED_105: 1106,
  UNUSED_106: 1107,
  UNUSED_107: 1108,
  UNUSED_108: 1109,
  UNUSED_109: 1110,
  UNUSED_110: 1111,
  UNUSED_111: 1112,
  UNUSED_112: 1113,
  UNUSED_113: 1114,
  UNUSED_114: 1115,
  UNUSED_115: 1116,
  UNUSED_116: 1117,
  UNUSED_117: 1118,
  UNUSED_118: 1119,
  UNUSED_119: 1120,
  UNUSED_120: 1121,
  UNUSED_121: 1122,
  UNUSED_122: 1123,
  UNUSED_123: 1124,
  UNUSED_124: 1125,
  UNUSED_125: 1126,
  UNUSED_126: 1127,
  UNUSED_127: 1128,
  UNUSED_128: 1129,
  UNUSED_129: 1130,
  UNUSED_130: 1131,
  UNUSED_131: 1132,
  UNUSED_132: 1133,
  UNUSED_133: 1134,
  UNUSED_134: 1135,
  UNUSED_135: 1136,
  UNUSED_136: 1137,
  UNUSED_137: 1138,
  UNUSED_138: 1139,
  UNUSED_139: 1140,
  UNUSED_140: 1141,
  UNUSED_141: 1142,
  UNUSED_142: 1143,
  UNUSED_143: 1144,
  UNUSED_144: 1145,
  UNUSED_145: 1146,
  UNUSED_146: 1147,
  UNUSED_147: 1148,
  UNUSED_148: 1149,
  UNUSED_149: 1150,
  UNUSED_150: 1151,
  UNUSED_151: 1152,
  UNUSED_152: 1153,
  UNUSED_153: 1154,
  UNUSED_154: 1155,
  UNUSED_155: 1156,
  UNUSED_156: 1157,
  UNUSED_157: 1158,
  UNUSED_158: 1159,
  UNUSED_159: 1160,
  UNUSED_160: 1161,
  UNUSED_161: 1162,
  UNUSED_162: 1163,
  UNUSED_163: 1164,
  UNUSED_164: 1165,
  UNUSED_165: 1166,
  UNUSED_166: 1167,
  UNUSED_167: 1168,
  UNUSED_168: 1169,
  UNUSED_169: 1170,
  UNUSED_170: 1171,
  UNUSED_171: 1172,
  UNUSED_172: 1173,
  UNUSED_173: 1174,
  UNUSED_174: 1175,
  UNUSED_175: 1176,
  UNUSED_176: 1177,
  UNUSED_177: 1178,
  UNUSED_178: 1179,
  UNUSED_179: 1180,
  UNUSED_180: 1181,
  UNUSED_181: 1182,
  UNUSED_182: 1183,
  UNUSED_183: 1184,
  UNUSED_184: 1185,
  UNUSED_185: 1186,
  UNUSED_186: 1187,
  UNUSED_187: 1188,
  UNUSED_188: 1189,
  UNUSED_189: 1190,
  UNUSED_190: 1191,
  UNUSED_191: 1192,
  UNUSED_192: 1193,
  UNUSED_193: 1194,
  UNUSED_194: 1195,
  UNUSED_195: 1196,
  UNUSED_196: 1197,
  UNUSED_197: 1198,
  UNUSED_198: 1199,
  UNUSED_199: 1200,
  UNUSED_200: 1201,
};
export type NullableStringType = {|
  strValue?: string,
|};
export type NullableI32Type = {|
  int32Value?: number,
|};
export type NullableDoubleType = {|
  doubleValue?: number,
|};
export type NullableBoolType = {|
  boolValue?: boolean,
|};
export type NullableUUIDType = {|
  uuidValue?: UUIDType,
|};
export type ThirdPartyIdentityTypeType =
  | 'AlipayIdentity'
  | 'FacebookIdentity'
  | 'ConcurIdentity'
  | 'SpotifyIdentity'
  | 'AppleIdentity'
  | 'RdioIdentity'
  | 'BaiduIdentity'
  | 'WechatIdentity'
  | 'PandoraIdentity'
  | 'GoogleIdentity'
  | 'LineIdentity'
  | 'IdmeIdentity'
  | 'FacebookUberPageIdentity'
  | 'YandexIdentity'
  | 'TaxiDriverIdentity'
  | 'MasabiIdentity';
export const ThirdPartyIdentityTypeValueMap = {
  AlipayIdentity: 1,
  FacebookIdentity: 1,
  ConcurIdentity: 2,
  SpotifyIdentity: 3,
  AppleIdentity: 4,
  RdioIdentity: 5,
  BaiduIdentity: 6,
  WechatIdentity: 7,
  PandoraIdentity: 8,
  GoogleIdentity: 9,
  LineIdentity: 10,
  IdmeIdentity: 11,
  FacebookUberPageIdentity: 12,
  YandexIdentity: 13,
  TaxiDriverIdentity: 14,
  MasabiIdentity: 15,
};
export type AddressInfoType = {|
  name?: string,
  street1?: string,
  street2?: string,
  city?: string,
  state?: string,
  countryId?: number,
  zipcode?: string,
|};
export type AddressType = {|
  addressUuid?: UUIDType,
  addressType?: AddressTypeType,
  name?: string,
  street1?: string,
  street2?: string,
  city?: string,
  state?: string,
  countryId?: number,
  zipcode?: string,
  createdAt?: DateTimeType,
  updatedAt?: DateTimeType,
  deletedAt?: DateTimeType,
|};
export type FreightUserPermissionsType = {|
  canSeePrice?: boolean,
  canBookLoad?: boolean,
|};
export type FreightInfoType = {|
  fleetSize?: number,
  fleetSizeDescription?: string,
  mcOrDotNumber?: string,
  carrierPacketUrl?: string,
  role?: string,
  carrierUserUuid?: UUIDType,
  createdAt?: DateTimeType,
  updatedAt?: DateTimeType,
  deletedAt?: DateTimeType,
  carrierStatus?: FreightCarrierStatusType,
  mcNumber?: string,
  dotNumber?: string,
  userStatus?: FreightUserStatusType,
  userRole?: FreightUserRoleType,
  createPasswordNotificationLastSentBy?: UUIDType,
  createPasswordNotificationLastSentTime?: DateTimeType,
  externalVerificationEmail?: string,
  isExternalEmailVerified?: boolean,
  permissions?: FreightUserPermissionsType,
|};
export type AttributionMetadataType = {|
  name?: string,
  value?: string,
|};
export type AttributionSubChannelType = {|
  name?: string,
  value?: string,
|};
export type MarketingAttributedEventType = {|
  eventType?: string,
  channel?: string,
  subChannels?: AttributionSubChannelType[],
  source?: string,
  spendRecordedAt?: DateTimeType,
  createdAt?: DateTimeType,
  updatedAt?: DateTimeType,
  clickTimestamp?: DateTimeType,
  channelGroup?: string,
  platform?: string,
  subPlatform?: string,
  referringDomain?: string,
  uberAdId?: string,
  impressionTimestamp?: DateTimeType,
  metadata?: AttributionMetadataType[],
|};
export type MarketingAttributedEventSelectorType = {|
  eventType?: string,
  channel?: string,
  source?: string,
  createdAt?: DateTimeType,
|};
export type UpdateMarketingAttributedEventRequestType = {|
  userUuid?: UUIDType,
  selector?: MarketingAttributedEventSelectorType,
  updatedEvent?: MarketingAttributedEventType,
|};
export type UserAttributeType = {|
  key: string,
  value?: string,
  createdAt?: DateTimeType,
  updatedAt?: DateTimeType,
  deletedAt?: DateTimeType,
|};
export type UserEmailType = {|
  email: string,
  confirmationToken?: string,
  isConfirmed?: boolean,
  paymentProfileUuid?: UUIDType,
  createdAt?: DateTimeType,
  updatedAt?: DateTimeType,
|};
export type UserEmailsType = {|
  emails: UserEmailType[],
|};
export type UserNoteType = {|
  note: string,
  createdByUserUuid?: UUIDType,
  updatedByUserUuid?: UUIDType,
  createdAt?: DateTimeType,
  updatedAt?: DateTimeType,
  deletedAt?: DateTimeType,
  id?: string,
|};
export type DriverStatusEntityType = {|
  driverStatus?: DriverStatusType,
  notes?: string,
  createdByUserUuid?: UUIDType,
  updatedByUserUuid?: UUIDType,
  createdAt?: DateTimeType,
  updatedAt?: DateTimeType,
  id?: string,
|};
export type PaymentProfileByProductType = {|
  product?: ProductType,
  paymentProfileUUID?: UUIDType,
|};
export type UpdateUserInfoRequestType = {|
  firstname?: string,
  lastname?: string,
  location?: string,
  countryId?: number,
  languageId?: number,
  nickname?: string,
  gratuity?: number,
  email?: string,
  mobile?: string,
  mobileCountryIso2?: string,
  isExemptedFromConfirmingMobile?: boolean,
  deviceId?: string,
  cardio?: boolean,
  lastSelectedPaymentProfileUuid?: UUIDType,
  dateOfBirth?: DateTimeType,
  preferredName?: string,
  identityVerified?: boolean,
  paymentEntityType?: string,
  identityRejectReasonUuid?: UUIDType,
  genderInferred?: GenderTypeType,
  genderIdentity?: GenderTypeType,
  genderDocumented?: GenderTypeType,
  riderIneligibleWdw?: boolean,
  defaultPaymentProfileByProduct?: PaymentProfileByProductType[],
|};
export type UpdateDriverInfoRequestType = {|
  iphone?: string,
  receiveSms?: boolean,
  twilioNumber?: string,
  twilioNumberFormatted?: string,
  contactinfo?: string,
  contactinfoCountryCode?: string,
  driverType?: DriverCompensationTypeType,
|};
export type UpdateDriverStatusRequestType = {|
  driverStatusEntity?: DriverStatusEntityType,
|};
export type UpdatePartnerInfoRequestType = {|
  company?: string,
  cityId?: number,
  state?: string,
  zipcode?: string,
  cityName?: string,
  vatNumber?: string,
  address?: string,
  address2?: string,
  preferredCollectionPaymentProfileUuid?: UUIDType,
  partnerStatus?: PartnerStatusType,
  fleetTypes?: FleetTypeType[],
  fleetServices?: FleetServiceType[],
  isFleet?: boolean,
|};
export type UpdateFreightInfoRequestType = {|
  fleetSize?: number,
  fleetSizeDescription?: string,
  mcOrDotNumber?: string,
  carrierPacketUrl?: string,
  role?: string,
  carrierUserUuid?: UUIDType,
  carrierStatus?: FreightCarrierStatusType,
  mcNumber?: string,
  dotNumber?: string,
  userStatus?: FreightUserStatusType,
  userRole?: FreightUserRoleType,
  createPasswordNotificationLastSentBy?: UUIDType,
  createPasswordNotificationLastSentTime?: DateTimeType,
  externalVerificationEmail?: string,
  isExternalEmailVerified?: boolean,
  permissions?: FreightUserPermissionsType,
|};
export type UpdateNationalIdRequestType = {|
  nationalId: string,
  nationalIdType: NationalIdTypeType,
|};
export type BusinessTypeType =
  | 'RESTAURANT_TAKEOUT'
  | 'RETAIL_SHOPPING'
  | 'GROCERY_SPECIALTY'
  | 'FLORIST'
  | 'PROFESSIONAL_CREATIVE'
  | 'REAL_ESTATE'
  | 'REPAIRS_CLEANING'
  | 'WHOLESALE_TRADE'
  | 'OTHER';
export const BusinessTypeValueMap = {
  RESTAURANT_TAKEOUT: 1,
  RETAIL_SHOPPING: 1,
  GROCERY_SPECIALTY: 2,
  FLORIST: 3,
  PROFESSIONAL_CREATIVE: 4,
  REAL_ESTATE: 5,
  REPAIRS_CLEANING: 6,
  WHOLESALE_TRADE: 7,
  OTHER: 8,
};
export type MerchantLocationTypeType = 'LOCATION' | 'BUSINESS';
export const MerchantLocationTypeValueMap = {
  LOCATION: 1,
  BUSINESS: 2,
};
export type FreightUserStatusType =
  | 'ACTIVE'
  | 'SUSPENDED'
  | 'INACTIVE'
  | 'SIGNED_UP'
  | 'INITIATED'
  | 'UNUSED_TYPE6';
export const FreightUserStatusValueMap = {
  ACTIVE: 1,
  SUSPENDED: 2,
  INACTIVE: 3,
  SIGNED_UP: 4,
  INITIATED: 5,
  UNUSED_TYPE6: 6,
};
export type FreightUserRoleType =
  | 'DRIVER'
  | 'DISPATCHER'
  | 'DRIVER_DISPATCHER'
  | 'FACTORING_COMPANY'
  | 'UNUSED_TYPE5'
  | 'UNUSED_TYPE6';
export const FreightUserRoleValueMap = {
  DRIVER: 1,
  DISPATCHER: 2,
  DRIVER_DISPATCHER: 3,
  FACTORING_COMPANY: 4,
  UNUSED_TYPE5: 5,
  UNUSED_TYPE6: 6,
};
export type FreightCarrierStatusType =
  | 'INITIATED'
  | 'ACTIVE'
  | 'SUSPENDED'
  | 'INACTIVE'
  | 'SIGNED_UP'
  | 'UNUSED_TYPE6'
  | 'UNUSED_TYPE7'
  | 'UNUSED_TYPE8'
  | 'UNUSED_TYPE9'
  | 'UNUSED_TYPE10'
  | 'UNUSED_TYPE11';
export const FreightCarrierStatusValueMap = {
  INITIATED: 1,
  ACTIVE: 2,
  SUSPENDED: 3,
  INACTIVE: 4,
  SIGNED_UP: 5,
  UNUSED_TYPE6: 6,
  UNUSED_TYPE7: 7,
  UNUSED_TYPE8: 8,
  UNUSED_TYPE9: 9,
  UNUSED_TYPE10: 10,
  UNUSED_TYPE11: 11,
};
export type FleetTypeType =
  | 'RENTAL'
  | 'TRANSPORTATION'
  | 'CONNECTOR'
  | 'UNUSED_TYPE4'
  | 'UNUSED_TYPE5'
  | 'UNUSED_TYPE6'
  | 'UNUSED_TYPE7'
  | 'UNUSED_TYPE8'
  | 'UNUSED_TYPE9'
  | 'UNUSED_TYPE10'
  | 'UNUSED_TYPE11'
  | 'UNUSED_TYPE12';
export const FleetTypeValueMap = {
  RENTAL: 1,
  TRANSPORTATION: 2,
  CONNECTOR: 3,
  UNUSED_TYPE4: 4,
  UNUSED_TYPE5: 5,
  UNUSED_TYPE6: 6,
  UNUSED_TYPE7: 7,
  UNUSED_TYPE8: 8,
  UNUSED_TYPE9: 9,
  UNUSED_TYPE10: 10,
  UNUSED_TYPE11: 11,
  UNUSED_TYPE12: 12,
};
export type FleetServiceType =
  | 'ONBOARDING'
  | 'ENABLEMENT'
  | 'SUPPORT'
  | 'PAYMENTS'
  | 'FINANCE'
  | 'OTHER'
  | 'UNUSED_TYPE7'
  | 'UNUSED_TYPE8'
  | 'UNUSED_TYPE9'
  | 'UNUSED_TYPE10'
  | 'UNUSED_TYPE11'
  | 'UNUSED_TYPE12';
export const FleetServiceValueMap = {
  ONBOARDING: 1,
  ENABLEMENT: 2,
  SUPPORT: 3,
  PAYMENTS: 4,
  FINANCE: 5,
  OTHER: 6,
  UNUSED_TYPE7: 7,
  UNUSED_TYPE8: 8,
  UNUSED_TYPE9: 9,
  UNUSED_TYPE10: 10,
  UNUSED_TYPE11: 11,
  UNUSED_TYPE12: 12,
};
export type MerchantLocationType = {|
  uuid?: UUIDType,
  maxDeliveryRadius?: number,
  deliveryInstruction?: string,
  priceBucket?: string,
  deliveryFee?: number,
  averagePrepareTime?: number,
  tenancy?: string,
  email?: string,
  phone?: string,
  longitude?: number,
  latitude?: number,
  merchantName?: string,
  businessType?: BusinessTypeType,
  countryId?: number,
  territoryUUID?: UUIDType,
  regionId?: number,
  timezone?: string,
  timezoneOffsetSeconds?: number,
  createdAt?: DateTimeType,
  updatedAt?: DateTimeType,
  type?: MerchantLocationTypeType,
|};
export type ProfileTypeType =
  | 'Personal'
  | 'Business'
  | 'ManagedBusiness'
  | 'ManagedFamily'
  | 'Commuter';
export const ProfileTypeValueMap = {
  Personal: 0,
  Business: 1,
  ManagedBusiness: 2,
  ManagedFamily: 3,
  Commuter: 4,
};
export type BillingModeType = 'Centralized' | 'Decentralized';
export const BillingModeValueMap = {
  Centralized: 0,
  Decentralized: 1,
};
export type SummaryPeriodType = 'Weekly' | 'Monthly';
export const SummaryPeriodValueMap = {
  Weekly: 0,
  Monthly: 1,
};
export type ExpenseProviderType =
  | 'EXPENSIFY'
  | 'CONCUR'
  | 'CERTIFY'
  | 'CHROME_RIVER';
export const ExpenseProviderValueMap = {
  EXPENSIFY: 0,
  CONCUR: 1,
  CERTIFY: 2,
  CHROME_RIVER: 3,
};
export type ExpenseProviderV2Type =
  | 'EXPENSIFY'
  | 'CONCUR'
  | 'CERTIFY'
  | 'CHROME_RIVER'
  | 'SERKO_ZENO'
  | 'RYDOO'
  | 'HAPPAY'
  | 'EXPENSYA'
  | 'ZOHO_EXPENSE'
  | 'UNUSED_1'
  | 'UNUSED_2'
  | 'UNUSED_3'
  | 'UNUSED_4'
  | 'UNUSED_5'
  | 'UNUSED_6'
  | 'UNUSED_7'
  | 'UNUSED_8'
  | 'UNUSED_9'
  | 'UNUSED_10'
  | 'UNUSED_11'
  | 'UNUSED_12'
  | 'UNUSED_13'
  | 'UNUSED_14'
  | 'UNUSED_15'
  | 'UNUSED_16'
  | 'UNUSED_17'
  | 'UNUSED_18'
  | 'UNUSED_19'
  | 'UNUSED_20';
export const ExpenseProviderV2ValueMap = {
  EXPENSIFY: 0,
  CONCUR: 1,
  CERTIFY: 2,
  CHROME_RIVER: 3,
  SERKO_ZENO: 4,
  RYDOO: 5,
  HAPPAY: 6,
  EXPENSYA: 7,
  ZOHO_EXPENSE: 8,
  UNUSED_1: 9,
  UNUSED_2: 10,
  UNUSED_3: 11,
  UNUSED_4: 12,
  UNUSED_5: 13,
  UNUSED_6: 14,
  UNUSED_7: 15,
  UNUSED_8: 16,
  UNUSED_9: 17,
  UNUSED_10: 18,
  UNUSED_11: 19,
  UNUSED_12: 20,
  UNUSED_13: 21,
  UNUSED_14: 22,
  UNUSED_15: 23,
  UNUSED_16: 24,
  UNUSED_17: 25,
  UNUSED_18: 26,
  UNUSED_19: 27,
  UNUSED_20: 28,
};
export type InAppTermsAcceptedStateType =
  | 'NOT_APPLICABLE'
  | 'ACCEPTED'
  | 'NOT_ACCEPTED';
export const InAppTermsAcceptedStateValueMap = {
  NOT_APPLICABLE: 1,
  ACCEPTED: 2,
  NOT_ACCEPTED: 3,
};
export type ProductType =
  | 'RIDER'
  | 'EATS'
  | 'UNUSED_1'
  | 'UNUSED_2'
  | 'UNUSED_3'
  | 'UNUSED_4'
  | 'UNUSED_5'
  | 'UNUSED_6'
  | 'UNUSED_7'
  | 'UNUSED_8'
  | 'UNUSED_9'
  | 'UNUSED_10'
  | 'UNUSED_11'
  | 'UNUSED_12'
  | 'UNUSED_13'
  | 'UNUSED_14'
  | 'UNUSED_15'
  | 'UNUSED_16'
  | 'UNUSED_17'
  | 'UNUSED_18'
  | 'UNUSED_19'
  | 'UNUSED_20';
export const ProductValueMap = {
  RIDER: 0,
  EATS: 1,
  UNUSED_1: 2,
  UNUSED_2: 3,
  UNUSED_3: 4,
  UNUSED_4: 5,
  UNUSED_5: 6,
  UNUSED_6: 7,
  UNUSED_7: 8,
  UNUSED_8: 9,
  UNUSED_9: 10,
  UNUSED_10: 11,
  UNUSED_11: 12,
  UNUSED_12: 13,
  UNUSED_13: 14,
  UNUSED_14: 15,
  UNUSED_15: 16,
  UNUSED_16: 17,
  UNUSED_17: 18,
  UNUSED_18: 19,
  UNUSED_19: 20,
  UNUSED_20: 21,
};
export type UserProfileLogoType = {|
  url: string,
  width?: number,
  height?: number,
|};
export type UserProfileThemeType = {|
  color?: string,
  initials?: string,
  icon?: string,
  logos?: {
    [string]: UserProfileLogoType[],
  },
|};
export type EntityProfileAttributesType = {|
  billingMode?: BillingModeType,
  name?: string,
  theme?: UserProfileThemeType,
  memberUuid?: string,
  groupUuid?: string,
  isOrganizer?: boolean,
  version?: number,
  allowedExpenseProviders?: ExpenseProviderType[],
  allowedExpenseProvidersV2?: ExpenseProviderV2Type[],
|};
export type BusinesssIntegrationTypeType = string;
export const CONCUR_EXPENSE_PROVIDER: BusinesssIntegrationTypeType = 'CONCUR';
export type BusinessIntegrationType = {|
  businessIntegrationType?: BusinesssIntegrationTypeType,
  thirdPartyUserUuid?: string,
  accessToken?: string,
  refreshToken?: string,
  refreshTokenExpiry?: DateTimeType,
  businessIntegrationUpdatedAt?: DateTimeType,
  businessIntegrationDeletedAt?: DateTimeType,
|};
export type ExtraManagedBusinessAttributesType = {|
  inAppTermsAccepted?: InAppTermsAcceptedStateType,
  isConvertedFromUnmanaged?: boolean,
|};
export type InAppLinkingAttributesType = {|
  inAppTermsAccepted?: InAppTermsAcceptedStateType,
  unconfirmedEmployeeUuid?: UUIDType,
  isDecentralized?: boolean,
  userHadExistingUnmanaged?: boolean,
|};
export type ExtraProfileAttributesType = {|
  extraManagedBusinessAttributes?: ExtraManagedBusinessAttributesType,
  inAppLinkingAttributes?: InAppLinkingAttributesType,
  businessIntegration?: BusinessIntegrationType,
|};
export type UserProfileType = {|
  userProfileUuid: UUIDType,
  type: ProfileTypeType,
  defaultPaymentProfileUuid?: UUIDType,
  email?: string,
  entityUuid?: UUIDType,
  entityProfileAttributes?: EntityProfileAttributesType,
  isExpensingEnabled?: boolean,
  isVerified?: boolean,
  name?: string,
  status?: string,
  summaryStatementPeriods?: SummaryPeriodType[],
  theme?: UserProfileThemeType,
  createdAt?: DateTimeType,
  updatedAt?: DateTimeType,
  deletedAt?: DateTimeType,
  createdByUserUuid?: UUIDType,
  updatedByUserUuid?: UUIDType,
  activeExpenseProviders?: ExpenseProviderType[],
  secondaryPaymentProfileUuid?: UUIDType,
  extraProfileAttributes?: ExtraProfileAttributesType,
  activeExpenseProvidersV2?: ExpenseProviderV2Type[],
  defaultPaymentProfileByProduct?: {
    [ProductType]: UUIDType,
  },
|};
export type UserProfilesType = {|
  profiles?: UserProfileType[],
|};
export type UserTagType = {|
  name: string,
  note?: string,
  notes?: string,
  createdAt?: DateTimeType,
  updatedAt?: DateTimeType,
  deletedAt?: DateTimeType,
|};
export type UserRoleInfoType = {|
  role?: UserRoleType,
  isSuperAdmin?: boolean,
  isAdmin?: boolean,
  isRestricted?: boolean,
  isBanned?: boolean,
|};
export type UserTraitType = {|
  traitUuid: UUIDType,
  name: string,
  description?: string,
  createdAt?: DateTimeType,
  updatedAt?: DateTimeType,
  deletedAt?: DateTimeType,
|};
export type UserTraitMapType = {|
  traitUuid: UUIDType,
  createdAt?: DateTimeType,
  deletedAt?: DateTimeType,
|};
export type RewardType = {|
  rewardType: string,
  eligibleFor?: string,
  enabled?: boolean,
  enrolled?: boolean,
|};
export type PaymentProfileVendorDataType = {|
  processorCode?: string,
|};
export type ComboCardInfoFunctionType = 'DEBIT' | 'CREDIT';
export const ComboCardInfoFunctionValueMap = {
  DEBIT: 1,
  CREDIT: 1,
};
export type PaymentProfileViewType = {|
  uuid: UUIDType,
  clientUuid?: UUIDType,
  cardBin?: string,
  cardNumber?: string,
  cardType?: string,
  cardExpiration?: DateTimeType,
  displayName?: string,
  billingZip?: string,
  billingCountryIso2?: string,
  label?: string,
  status?: string,
  tokenType?: string,
  rewards?: RewardType[],
  createdAt?: DateTimeType,
  updatedAt?: DateTimeType,
  vendorData?: PaymentProfileVendorDataType,
  comboCardFunction?: ComboCardInfoFunctionType,
|};
export type PromotionCodeType = {|
  promotionCodeId: number,
  promotionCodeUuid?: UUIDType,
  promotionCode?: string,
  createdAt?: DateTimeType,
  updatedAt?: DateTimeType,
|};
export type ThirdPartyIdentityType = {|
  identityType: ThirdPartyIdentityTypeType,
  thirdPartyUserId?: string,
  accessToken?: string,
  accessTokenExpiry?: DateTimeType,
  refreshToken?: string,
  thirdPartyUserSecret?: string,
  meta?: string,
  createdAt?: DateTimeType,
  updatedAt?: DateTimeType,
|};
export type UpdateThirdPartyIdentityFieldsType = {|
  accessToken?: string,
  accessTokenExpiry?: DateTimeType,
|};
export type CreateThirdPartyIdentityFieldsType = {|
  tpi: ThirdPartyIdentityType,
  accessTokenCode?: string,
  redirectUri?: string,
|};
export type GetUserByTPIAccessTokenFieldsType = {|
  identityType: ThirdPartyIdentityTypeType,
  accessToken?: string,
  accessTokenCode?: string,
|};
export type StatusLocksType = {|
  lockFraud?: boolean,
  lockFraudPermanent?: boolean,
  lockSafety?: boolean,
  lockSafetyPermanent?: boolean,
  lockCompliance?: boolean,
  lockCompliancePermanent?: boolean,
  createdAt?: DateTimeType,
  updatedAt?: DateTimeType,
  deletedAt?: DateTimeType,
|};
export type UpdateFraudActionsRequestType = {|
  lockFraud?: boolean,
  lockFraudPermanent?: boolean,
  lockSafety?: boolean,
  lockSafetyPermanent?: boolean,
  lockCompliance?: boolean,
  lockCompliancePermanent?: boolean,
|};
export type UpdateStatusLocksRequestType = {|
  lockFraud?: boolean,
  lockFraudPermanent?: boolean,
  lockSafety?: boolean,
  lockSafetyPermanent?: boolean,
  lockCompliance?: boolean,
  lockCompliancePermanent?: boolean,
|};
export type DriverEngagementType = {|
  engagementCityId?: number,
  tier?: EngagementTierType,
  qualifyingPoints?: PointsType,
  lifetimeRewardPoints?: PointsType,
  qualificationPeriodStartsAt?: DateTimeType,
  tierExpiresAt?: DateTimeType,
  qualificationPeriodEndsAt?: DateTimeType,
  status?: DriverEngagementStatusType,
  isEnrolled?: boolean,
  enrolledAt?: DateTimeType,
|};
export type CourierEngagementType = {|
  engagementCityId?: number,
  tier?: EngagementTierType,
  qualifyingPoints?: PointsType,
  lifetimeRewardPoints?: PointsType,
  qualificationPeriodStartsAt?: DateTimeType,
  tierExpiresAt?: DateTimeType,
  qualificationPeriodEndsAt?: DateTimeType,
  status?: CourierEngagementStatusType,
  isEnrolled?: boolean,
  enrolledAt?: DateTimeType,
|};
export type RiderEngagementType = {|
  engagementCityId?: number,
  tier?: EngagementTierType,
  qualifyingPoints?: PointsType,
  lifetimeRewardPoints?: PointsType,
  qualificationPeriodStartsAt?: DateTimeType,
  tierExpiresAt?: DateTimeType,
  qualificationPeriodEndsAt?: DateTimeType,
  isEnrolled?: boolean,
  enrolledAt?: DateTimeType,
|};
export type LoginEligibilityType = {|
  denyLogin?: boolean,
  denyLoginReason?: string,
|};
export type DriverInfoType = {|
  contactinfo?: string,
  contactinfoCountryCode?: string,
  driverLicense?: string,
  firstDriverTripUuid?: UUIDType,
  iphone?: string,
  partnerUserUuid?: UUIDType,
  receiveSms?: boolean,
  twilioNumber?: string,
  twilioNumberFormatted?: string,
  cityknowledgeScore?: number,
  createdAt?: DateTimeType,
  updatedAt?: DateTimeType,
  deletedAt?: DateTimeType,
  driverStatus?: DriverStatusType,
  driverFlowType?: DriverFlowTypeType,
  statusLocks?: StatusLocksType,
  contactinfoCountryIso2Code?: string,
  driverEngagement?: DriverEngagementType,
  courierEngagement?: CourierEngagementType,
|};
export type PartnerInfoType = {|
  address?: string,
  territoryUuid?: UUIDType,
  company?: string,
  address2?: string,
  cityId?: number,
  cityName?: string,
  firstPartnerTripUuid?: UUIDType,
  preferredCollectionPaymentProfileUuid?: UUIDType,
  phone?: string,
  phoneCountryCode?: string,
  state?: string,
  vatNumber?: string,
  zipcode?: string,
  createdAt?: DateTimeType,
  updatedAt?: DateTimeType,
  deletedAt?: DateTimeType,
  fleetTypes?: FleetTypeType[],
  fleetServices?: FleetServiceType[],
  isFleet?: boolean,
|};
export type UserAnalyticsType = {|
  signupLat?: number,
  signupLng?: number,
  signupTerritoryUuid?: UUIDType,
  signupPromoId?: number,
  signupForm?: string,
  signupSessionId?: string,
  signupAppVersion?: string,
  signupAttributionMethod?: string,
  createdAt?: DateTimeType,
  updatedAt?: DateTimeType,
  signupCityId?: number,
  signupDeviceId?: string,
  signupReferralId?: string,
  signupPromoCode?: string,
  signupPromoCodeUuid?: UUIDType,
  signupPromoUuid?: UUIDType,
  signupMethod?: SignupMethodType,
|};
export type UserType = {|
  uuid: UUIDType,
  firstname?: string,
  lastname?: string,
  role?: UserRoleType,
  languageId?: number,
  countryId?: number,
  mobile?: string,
  mobileToken?: number,
  mobileCountryId?: number,
  mobileCountryCode?: string,
  hasAmbiguousMobileCountry?: boolean,
  lastConfirmedMobileCountryId?: number,
  email?: string,
  emailToken?: string,
  hasConfirmedMobile?: string,
  hasOptedInSmsMarketing?: boolean,
  hasConfirmedEmail?: boolean,
  gratuity?: number,
  nickname?: string,
  location?: string,
  banned?: boolean,
  cardio?: boolean,
  token?: string,
  fraudScore?: number,
  inviterUuid?: UUIDType,
  pictureUrl?: string,
  recentFareSplitterUuids?: UUIDType[],
  lastSelectedPaymentProfileUuid?: UUIDType,
  lastSelectedPaymentProfileGoogleWalletUuid?: UUIDType,
  inviteCode?: PromotionCodeType,
  driverInfo?: DriverInfoType,
  partnerInfo?: PartnerInfoType,
  analytics?: UserAnalyticsType,
  createdAt?: DateTimeType,
  updatedAt?: DateTimeType,
  deletedAt?: DateTimeType,
  tenancy?: string,
  mobileConfirmationStatus?: MobileConfirmationStatusType,
  nationalId?: string,
  nationalIdType?: NationalIdTypeType,
  merchantLocation?: MerchantLocationType,
  lastConfirmedMobile?: string,
  requestedDeletionAt?: DateTimeType,
  dateOfBirth?: DateTimeType,
  userTypes?: UserTypeType[],
  preferredName?: string,
  freightInfo?: FreightInfoType,
  tempPictureUrl?: string,
  identityVerified?: boolean,
  paymentEntityType?: string,
  riderEngagement?: RiderEngagementType,
  identityRejectReasonUuid?: UUIDType,
  genderInferred?: GenderTypeType,
  genderIdentity?: GenderTypeType,
  genderDocumented?: GenderTypeType,
  riderIneligibleWdw?: boolean,
  defaultPaymentProfileByProduct?: PaymentProfileByProductType[],
  loginEligibility?: LoginEligibilityType,
|};
export type UserWithTagNamesType = {|
  user?: UserType,
  tagNames?: string[],
|};
export type ExportedUserType = {|
  user: UserType,
  canMuber?: boolean,
  isAdmin?: boolean,
  tags?: {
    [string]: UserTagType,
  },
  paymentProfileViews?: PaymentProfileViewType[],
  thirdPartyIdentities?: ThirdPartyIdentityType[],
  notes?: UserNoteType[],
  traits?: {
    [string]: UserTraitMapType,
  },
  alternateEmails?: {
    [string]: UserEmailType,
  },
|};
export type DerivedFieldsType = {|
  hasConfirmedMobileStatus?: string,
  isExemptedFromConfirmingMobile?: boolean,
  isMobileExempt?: boolean,
  mobileLocal?: string,
  languageCode?: string,
  driverContactInfoFormatted?: string,
  riderReferralUrl?: string,
  driverReferralUrl?: string,
|};
export type ExtendedDerivedFieldsType = {|
  clientClaimedMobileLocal?: string,
  driverType?: string,
  partnerStatus?: string,
  baseName?: string,
|};
export type FareSplitterInfoType = {|
  firstname?: string,
  lastname?: string,
  mobile?: string,
  mobileCountryIso2?: string,
  pictureUrl?: string,
|};
export type CompleteUserType = {|
  user?: UserType,
  userTags?: {
    [string]: UserTagType,
  },
  userAttributes?: {
    [string]: UserAttributeType,
  },
  thirdPartyIdentities?: ThirdPartyIdentityType[],
  hasConfirmedMobileStatus?: string,
  isExemptedFromConfirmingMobile?: boolean,
  isMobileExempt?: boolean,
  mobileLocal?: string,
  languageCode?: string,
  driverContactInfoFormatted?: string,
  riderReferralUrl?: string,
  driverReferralUrl?: string,
  clientClaimedMobileLocal?: string,
  driverType?: string,
  partnerStatus?: string,
  baseName?: string,
  countryIso2Code?: string,
  formattedAddress?: string[],
  paymentProfileViews?: PaymentProfileViewType[],
  mobileCountryIso2Code?: string,
  userTraits?: {
    [UUIDType]: UserTraitMapType,
  },
  hasValidPaymentProfile?: boolean,
  lastConfirmedMobileCountryCode?: string,
  lastConfirmedMobileCountryIso2Code?: string,
  driverContactInfoCountryIso2Code?: string,
|};
export type ExtendedUserType = {|
  user?: UserType,
  userTags?: {
    [string]: UserTagType,
  },
  userAttributes?: {
    [string]: UserAttributeType,
  },
  thirdPartyIdentities?: ThirdPartyIdentityType[],
  hasConfirmedMobileStatus?: string,
  isExemptedFromConfirmingMobile?: boolean,
  isMobileExempt?: boolean,
  mobileLocal?: string,
  languageCode?: string,
  driverContactInfoFormatted?: string,
  riderReferralUrl?: string,
  driverReferralUrl?: string,
  clientClaimedMobileLocal?: string,
  driverType?: string,
  partnerStatus?: string,
  baseName?: string,
  fullPictureUrl?: string,
  countryIso2Code?: string,
  formattedAddress?: string[],
  paymentProfileViews?: PaymentProfileViewType[],
  mobileCountryIso2Code?: string,
  userTraits?: {
    [UUIDType]: UserTraitMapType,
  },
  recentFareSplitters?: FareSplitterInfoType[],
  hasValidPaymentProfile?: boolean,
  lastConfirmedMobileCountryCode?: string,
  lastConfirmedMobileCountryIso2Code?: string,
  cityId?: number,
|};
export type UserSegmentType = {|
  name: string,
  version?: number,
  createdByUserUuid?: UUIDType,
  createdByService?: string,
  createdAt?: DateTimeType,
  updatedByUserUuid?: UUIDType,
  updatedByService?: string,
  updatedAt?: DateTimeType,
  deletedByUserUuid?: UUIDType,
  deletedByService?: string,
  deletedAt?: DateTimeType,
|};
export type RequestedFieldsType = {|
  user?: boolean,
  userTags?: boolean,
  userAttributes?: boolean,
  thirdPartyIdentities?: boolean,
  hasConfirmedMobileStatus?: boolean,
  isExemptedFromConfirmingMobile?: boolean,
  isMobileExempt?: boolean,
  mobileLocal?: boolean,
  languageCode?: boolean,
  driverContactInfoFormatted?: boolean,
  riderReferralUrl?: boolean,
  driverReferralUrl?: boolean,
  clientClaimedMobileLocal?: boolean,
  driverType?: boolean,
  partnerStatus?: boolean,
  baseName?: boolean,
  fullPictureUrl?: boolean,
  countryIso2Code?: boolean,
  formattedAddress?: boolean,
  paymentProfileViews?: boolean,
  mobileCountryIso2Code?: boolean,
  userTraits?: boolean,
  recentFareSplitters?: boolean,
  hasValidPaymentProfile?: boolean,
  lastConfirmedMobileCountryCode?: boolean,
  lastConfirmedMobileCountryIso2Code?: boolean,
  cityId?: boolean,
|};
export type SignupMethodType = 'REGULAR' | 'MOBILE_ONLY' | 'PASSWORDLESS';
export const SignupMethodValueMap = {
  REGULAR: 1,
  MOBILE_ONLY: 1,
  PASSWORDLESS: 2,
};
export type MobileConfirmationStatusType =
  | 'MOBILE_CONFIRMED'
  | 'MOBILE_SMS_CONFIRMED'
  | 'MOBILE_VOICE_CONFIRMED'
  | 'MOBILE_VOICE_CONFIRM_REQUIRED'
  | 'MOBILE_NOT_CONFIRMED'
  | 'MOBILE_EXEMPT'
  | 'MOBILE_EXEMPT_NON_AMERICAN'
  | 'MOBILE_EXEMPT_GLOBAL';
export const MobileConfirmationStatusValueMap = {
  MOBILE_CONFIRMED: 0,
  MOBILE_SMS_CONFIRMED: 1,
  MOBILE_VOICE_CONFIRMED: 2,
  MOBILE_VOICE_CONFIRM_REQUIRED: 3,
  MOBILE_NOT_CONFIRMED: 4,
  MOBILE_EXEMPT: 5,
  MOBILE_EXEMPT_NON_AMERICAN: 6,
  MOBILE_EXEMPT_GLOBAL: 7,
};
export type SearchPagingInfoType = {|
  token?: string,
  limit?: number,
  forceNoSorting?: boolean,
  limit32?: number,
|};
export type PagingResultType = {|
  nextPageToken?: string,
  estimatedTotalPages?: number,
|};
export type UserPictureType = {|
  base64EncodeString?: string,
  existingPictureName?: string,
|};
export type PartnerDriversPagingResultType = {|
  drivers: UserType[],
  paging?: PagingResultType,
|};
export type SetClientMobileConfirmationStatusRequestType = {|
  status: MobileConfirmationStatusType,
  mobile?: string,
  mobileCountryId?: number,
  mobileCountryCode?: string,
  shouldConsolidateDriverMobile?: boolean,
|};
export type ReleaseMobileNumberRequestType = {|
  nationalNumber?: string,
  countryCode?: string,
|};
export type ChangeRoleRequestType = {|
  newRole?: UserRoleType,
  driverInfo?: DriverInfoType,
  partnerInfo?: PartnerInfoType,
  freightInfo?: FreightInfoType,
|};
export type UserDataTypeType =
  | 'PROFILE_PHOTO'
  | 'MOBILE'
  | 'USER_NAMES'
  | 'UNUSED_TYPE3'
  | 'UNUSED_TYPE4'
  | 'UNUSED_TYPE5'
  | 'UNUSED_TYPE6'
  | 'UNUSED_TYPE7'
  | 'UNUSED_TYPE8'
  | 'UNUSED_TYPE9';
export const UserDataTypeValueMap = {
  PROFILE_PHOTO: 1,
  MOBILE: 1,
  USER_NAMES: 2,
  UNUSED_TYPE3: 3,
  UNUSED_TYPE4: 4,
  UNUSED_TYPE5: 5,
  UNUSED_TYPE6: 6,
  UNUSED_TYPE7: 7,
  UNUSED_TYPE8: 8,
  UNUSED_TYPE9: 9,
};
export type UserDataHistoryElementType = {|
  value?: string,
  oldValue?: string,
  userDataType?: UserDataTypeType,
  userActivityType?: string,
  requester?: string,
  source?: string,
  updatedAt?: DateTimeType,
|};
export type GetUserDataHistoryRequestType = {|
  userDataType?: UserDataTypeType,
  userActivityType?: string,
  pageSize?: number,
  token?: string,
|};
export type GetUserDataHistoryResponseType = {|
  userDataHistory?: UserDataHistoryElementType[],
  token?: string,
|};
export type GetUserSegmentRequestType = {|
  userUUID: UUIDType,
  domain: string,
|};
export type UpdateUserSegmentRequestType = {|
  userUUID: UUIDType,
  domain: string,
  name: string,
  version?: number,
  ignoreIfExist?: boolean,
|};
export type HeadersType = {|
  acceptLanguage?: string,
  xUberDeviceLanguage?: string,
  xUberDeviceLocationLatitude?: number,
  xUberDeviceLocationLongitude?: number,
  xForwardedFor?: string,
|};
export type CreateBaseUserRequestType = {|
  tenancy?: string,
  email?: string,
  hasConfirmedEmail?: boolean,
  mobile?: string,
  mobileCountryCode?: string,
  mobileConfirmationStatus?: MobileConfirmationStatusType,
  headers?: HeadersType,
|};
export type EngagementTierType =
  | 'UNKNOWN'
  | 'TIER_1'
  | 'TIER_2'
  | 'TIER_3'
  | 'TIER_4'
  | 'UNUSED_TYPE5'
  | 'UNUSED_TYPE6'
  | 'UNUSED_TYPE7'
  | 'UNUSED_TYPE8'
  | 'UNUSED_TYPE9'
  | 'UNUSED_TYPE10';
export const EngagementTierValueMap = {
  UNKNOWN: 0,
  TIER_1: 1,
  TIER_2: 2,
  TIER_3: 3,
  TIER_4: 4,
  UNUSED_TYPE5: 5,
  UNUSED_TYPE6: 6,
  UNUSED_TYPE7: 7,
  UNUSED_TYPE8: 8,
  UNUSED_TYPE9: 9,
  UNUSED_TYPE10: 10,
};
export type DriverEngagementStatusType =
  | 'NONE'
  | 'WARNING_QUALITY'
  | 'SUSPENDED_QUALITY'
  | 'UNUSED_TYPE3'
  | 'UNUSED_TYPE4'
  | 'UNUSED_TYPE5'
  | 'UNUSED_TYPE6'
  | 'UNUSED_TYPE7'
  | 'UNUSED_TYPE8'
  | 'UNUSED_TYPE9'
  | 'UNUSED_TYPE10';
export const DriverEngagementStatusValueMap = {
  NONE: 0,
  WARNING_QUALITY: 1,
  SUSPENDED_QUALITY: 2,
  UNUSED_TYPE3: 3,
  UNUSED_TYPE4: 4,
  UNUSED_TYPE5: 5,
  UNUSED_TYPE6: 6,
  UNUSED_TYPE7: 7,
  UNUSED_TYPE8: 8,
  UNUSED_TYPE9: 9,
  UNUSED_TYPE10: 10,
};
export type CourierEngagementStatusType =
  | 'NONE'
  | 'WARNING_QUALITY'
  | 'SUSPENDED_QUALITY'
  | 'UNUSED_TYPE3'
  | 'UNUSED_TYPE4'
  | 'UNUSED_TYPE5'
  | 'UNUSED_TYPE6'
  | 'UNUSED_TYPE7'
  | 'UNUSED_TYPE8'
  | 'UNUSED_TYPE9'
  | 'UNUSED_TYPE10';
export const CourierEngagementStatusValueMap = {
  NONE: 0,
  WARNING_QUALITY: 1,
  SUSPENDED_QUALITY: 2,
  UNUSED_TYPE3: 3,
  UNUSED_TYPE4: 4,
  UNUSED_TYPE5: 5,
  UNUSED_TYPE6: 6,
  UNUSED_TYPE7: 7,
  UNUSED_TYPE8: 8,
  UNUSED_TYPE9: 9,
  UNUSED_TYPE10: 10,
};
export type GenderTypeType =
  | 'MALE'
  | 'FEMALE'
  | 'INDETERMINATE'
  | 'OTHER'
  | 'DECLINED'
  | 'UNUSED_TYPE5'
  | 'UNUSED_TYPE6'
  | 'UNUSED_TYPE7'
  | 'UNUSED_TYPE8'
  | 'UNUSED_TYPE9'
  | 'UNUSED_TYPE10';
export const GenderTypeValueMap = {
  MALE: 0,
  FEMALE: 1,
  INDETERMINATE: 2,
  OTHER: 3,
  DECLINED: 4,
  UNUSED_TYPE5: 5,
  UNUSED_TYPE6: 6,
  UNUSED_TYPE7: 7,
  UNUSED_TYPE8: 8,
  UNUSED_TYPE9: 9,
  UNUSED_TYPE10: 10,
};
export type RiderEngagementRequestType = {|
  userUuid?: UUIDType,
  engagement?: RiderEngagementType,
|};
export type DriverEngagementRequestType = {|
  userUuid?: UUIDType,
  engagement?: DriverEngagementType,
|};
export type CourierEngagementRequestType = {|
  userUuid?: UUIDType,
  engagement?: CourierEngagementType,
|};
export type ChangeUserCityAndFlowTypeRequestType = {|
  userUuid?: UUIDType,
  territoryId?: number,
  flowType?: DriverFlowTypeType,
|};
export type ChangeUserCityAndFlowTypeResponseType = {|
  message?: string,
  success?: boolean,
  type?: string,
|};
export type UpdateLoginEligibilityRequestType = {|
  denyLogin?: boolean,
  denyLoginReason?: string,
|};
export type UserServiceType = {
  createUserTag: (
    args: {|
      userUuid: UUIDType,
      name: string,
      note: string,
      notes: string[],
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserTagType>,
  deleteUserTag: (
    args: {|
      userUuid: UUIDType,
      tagName: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  updateUserTagBulk: (
    args: {|
      userUuids: UUIDType[],
      name: string,
      note: string,
      notes: string[],
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  addUserTrait: (
    args: {|
      userUuid: UUIDType,
      traitUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserTraitMapType>,
  removeUserTrait: (
    args: {|
      userUuid: UUIDType,
      traitUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  getUserTraits: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserTraitMapType[]>,
  createUser: (
    args: {|
      user: UserType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  assignUserTypes: (
    args: {|
      userUuid: UUIDType,
      userTypes: UserTypeType[],
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  removeUserTypes: (
    args: {|
      userUuid: UUIDType,
      userTypes: UserTypeType[],
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  updateUserInfo: (
    args: {|
      userUuid: UUIDType,
      userFields: UpdateUserInfoRequestType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  updateDriverInfo: (
    args: {|
      userUuid: UUIDType,
      userFields: UpdateUserInfoRequestType,
      driverFields: UpdateDriverInfoRequestType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  updatePartnerInfo: (
    args: {|
      userUuid: UUIDType,
      userFields: UpdateUserInfoRequestType,
      driverFields: UpdateDriverInfoRequestType,
      partnerFields: UpdatePartnerInfoRequestType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  updateFreightInfo: (
    args: {|
      userUuid: UUIDType,
      freightFields: UpdateFreightInfoRequestType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  deleteUser: (
    args: {|
      userUuid: UUIDType,
      note: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  markUserForDeletion: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  unmarkUserForDeletion: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  scrubUser: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  deleteUserTestTenancy: (
    args: {|
      userUuid: UUIDType,
      note: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  updateUserPicture: (
    args: {|
      userUuid: UUIDType,
      userPicture: UserPictureType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  deleteUserPicture: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  deleteDriverContactInfo: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  setAlternateEmails: (
    args: {|
      userUuid: UUIDType,
      emails: UserEmailType[],
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  setConfirmAlternateEmail: (
    args: {|
      userUuid: UUIDType,
      email: string,
      isConfirmed: boolean,
      emailToken: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  setConfirmEmail: (
    args: {|
      userUuid: UUIDType,
      emailToken: string,
      isConfirmed: boolean,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  setToken: (
    args: {|
      userUuid: UUIDType,
      token: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  setEmailToken: (
    args: {|
      userUuid: UUIDType,
      emailToken: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  createUserNote: (
    args: {|
      userUuid: UUIDType,
      note: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserNoteType>,
  deleteUserNote: (
    args: {|
      userUuid: UUIDType,
      noteId: number,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  updateUserAttribute: (
    args: {|
      userUuid: UUIDType,
      key: string,
      value: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserAttributeType>,
  deleteUserAttribute: (
    args: {|
      userUuid: UUIDType,
      key: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  setPaymentProfileViews: (
    args: {|
      userUuid: UUIDType,
      paymentProfileViews: PaymentProfileViewType[],
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  deletePaymentProfileView: (
    args: {|
      userUuid: UUIDType,
      paymentProfileUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  createThirdPartyIdentity: (
    args: {|
      userUuid: UUIDType,
      tpiFields: CreateThirdPartyIdentityFieldsType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<ThirdPartyIdentityType>,
  updateThirdPartyIdentity: (
    args: {|
      userUuid: UUIDType,
      identityFields: UpdateThirdPartyIdentityFieldsType,
      identityType: ThirdPartyIdentityTypeType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<ThirdPartyIdentityType>,
  deleteThirdPartyIdentity: (
    args: {|
      userUuid: UUIDType,
      identityType: ThirdPartyIdentityTypeType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  createTraitType: (
    args: {|
      traitUuid: UUIDType,
      name: string,
      description: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  deleteTraitType: (
    args: {|
      traitUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  unbanUser: (
    args: {|
      userUuid: UUIDType,
      additionalTag: string,
      note: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  banUser: (
    args: {|
      userUuid: UUIDType,
      additionalTag: string,
      note: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  reinstateRole: (
    args: {|
      userUuid: UUIDType,
      newRole: UserRoleType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  changeRole: (
    args: {|
      userUuid: UUIDType,
      changeRoleRequest: ChangeRoleRequestType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  changeDriversPartner: (
    args: {|
      driverUuid: UUIDType,
      partnerUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  forceTokenAndEmailTokenReset: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  getUser: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  getCompleteUser: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<CompleteUserType>,
  getUsers: (
    args: {|
      userUuids: UUIDType[],
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType[]>,
  getUserWithTagNames: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserWithTagNamesType>,
  getDerivedFields: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<DerivedFieldsType>,
  getExtendedDerivedFields: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<ExtendedDerivedFieldsType>,
  getExtendedUser: (
    args: {|
      userUuid: UUIDType,
      requestedFields: RequestedFieldsType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<ExtendedUserType>,
  getFullPictureUrl: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<string>,
  getUserByToken: (
    args: {|
      token: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  getUserByEmail: (
    args: {|
      email: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  getUserByPromotionCode: (
    args: {|
      promotionCode: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  getUserByFullMobile: (
    args: {|
      mobile: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  getUserByMobileAndCountryCode: (
    args: {|
      nationalNumber: string,
      countryCode: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  getUserByTwilioNumber: (
    args: {|
      twilioNumber: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  getUserByNickname: (
    args: {|
      nickname: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  getUserByThirdPartyIdentity: (
    args: {|
      identityType: ThirdPartyIdentityTypeType,
      thirdPartyUserId: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  getUserByTPIAccessToken: (
    args: {|
      fields: GetUserByTPIAccessTokenFieldsType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  getUserByEmailToken: (
    args: {|
      emailToken: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  getAlternateEmails: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserEmailType[]>,
  getAddressesByType: (
    args: {|
      userUuid: UUIDType,
      addressType: AddressTypeType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<{
    [UUIDType]: AddressType,
  }>,
  getAddresses: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<{
    [UUIDType]: AddressType,
  }>,
  createAddress: (
    args: {|
      userUuid: UUIDType,
      addressInfo: AddressInfoType,
      addressType: AddressTypeType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<AddressType>,
  updateAddress: (
    args: {|
      userUuid: UUIDType,
      addressUuid: UUIDType,
      addressInfo: AddressInfoType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<AddressType>,
  deleteAddress: (
    args: {|
      userUuid: UUIDType,
      addressUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  getUserAttributes: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<{
    [string]: UserAttributeType,
  }>,
  getUserAttributeByKey: (
    args: {|
      userUuid: UUIDType,
      key: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserAttributeType>,
  getUserAttributeByKeys: (
    args: {|
      userUuid: UUIDType,
      keys: string[],
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<{
    [string]: UserAttributeType,
  }>,
  getUserNotes: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserNoteType[]>,
  getUserTags: (
    args: {|
      userUuid: UUIDType,
      activeOnly: boolean,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<{
    [string]: UserTagType,
  }>,
  getUserTag: (
    args: {|
      userUuid: UUIDType,
      tag: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserTagType>,
  hasUserTags: (
    args: {|
      userUuid: UUIDType,
      names: string[],
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<string[]>,
  getUserRoleInfo: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserRoleInfoType>,
  getUserTenancy: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<string>,
  getPartnerDrivers: (
    args: {|
      partnerUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType[]>,
  getPartnerDriversPagingResult: (
    args: {|
      partnerUuid: UUIDType,
      pagingInfo: SearchPagingInfoType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<PartnerDriversPagingResultType>,
  getDriversByContactInfo: (
    args: {|
      nationalNumber: string,
      countryCode: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType[]>,
  getThirdPartyIdentities: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<ThirdPartyIdentityType[]>,
  refreshThirdPartyIdentityToken: (
    args: {|
      userUuid: UUIDType,
      identityType: ThirdPartyIdentityTypeType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<ThirdPartyIdentityType>,
  getPaymentProfileViews: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<PaymentProfileViewType[]>,
  getAllTraitTypes: () => Promise<{
    [UUIDType]: UserTraitType,
  }>,
  getAppRevokedTime: (
    args: {|
      userUuid: UUIDType,
      oauthAppId: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<DateTimeType>,
  setAppRevoked: (
    args: {|
      userUuid: UUIDType,
      oauthAppId: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  createUserProfile: (
    args: {|
      userUuid: UUIDType,
      userProfile: UserProfileType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserProfileType>,
  getUserProfiles: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserProfileType[]>,
  getUserProfilesWithDeletedProfiles: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserProfileType[]>,
  updateUserProfile: (
    args: {|
      userUuid: UUIDType,
      userProfile: UserProfileType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserProfileType>,
  deleteUserProfile: (
    args: {|
      userUuid: UUIDType,
      profileUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  getDriverStatuses: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<DriverStatusEntityType[]>,
  updateDriverStatusWithEntity: (
    args: {|
      userUuid: UUIDType,
      updateDriverStatusRequest: UpdateDriverStatusRequestType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  setDriverFlowType: (
    args: {|
      driverUuid: UUIDType,
      driverFlowType: DriverFlowTypeType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  setMobileConfirmationStatus: (
    args: {|
      userUuid: UUIDType,
      status: MobileConfirmationStatusType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  setClientMobileConfirmationStatus: (
    args: {|
      userUuid: UUIDType,
      setClientMobileConfirmationStatusRequest: SetClientMobileConfirmationStatusRequestType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  setMobileToken: (
    args: {|
      userUuid: UUIDType,
      mobileToken: number,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  setReferralCode: (
    args: {|
      userUuid: UUIDType,
      referralCode: string,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  setInviterUuid: (
    args: {|
      userUuid: UUIDType,
      inviterUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  updateNationalId: (
    args: {|
      userUuid: UUIDType,
      request: UpdateNationalIdRequestType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  setFirstDriverTripUuid: (
    args: {|
      userUuid: UUIDType,
      firstTripUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  setFirstPartnerTripUuid: (
    args: {|
      userUuid: UUIDType,
      firstTripUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  setRecentFareSplitterUuids: (
    args: {|
      userUuid: UUIDType,
      recentFareSplitterUuids: UUIDType[],
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  getUserDataHistory: (
    args: {|
      userUuid: UUIDType,
      request: GetUserDataHistoryRequestType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<GetUserDataHistoryResponseType>,
  getUserSegment: (
    args: {|
      request: GetUserSegmentRequestType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserSegmentType>,
  updateUserSegment: (
    args: {|
      request: UpdateUserSegmentRequestType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  createMarketingAttributedEvent: (
    args: {|
      userUuid: UUIDType,
      marketingAttributedEvent: MarketingAttributedEventType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<MarketingAttributedEventType>,
  getMarketingAttributedEvents: (
    args: {|
      userUuid: UUIDType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<MarketingAttributedEventType[]>,
  updateMarketingAttributedEvent: (
    args: {|
      request: UpdateMarketingAttributedEventRequestType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  deleteMarketingAttributedEvent: (
    args: {|
      userUuid: UUIDType,
      selector: MarketingAttributedEventSelectorType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  createBaseUser: (
    args: {|
      request: CreateBaseUserRequestType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  updateFraudActions: (
    args: {|
      userUuid: UUIDType,
      fraudActions: UpdateFraudActionsRequestType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  updateStatusLocks: (
    args: {|
      userUuid: UUIDType,
      statusLocks: UpdateStatusLocksRequestType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
  releaseMobileNumber: (
    args: {|
      releaseMobileNumberRequest: ReleaseMobileNumberRequestType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UUIDType>,
  updateRiderEngagement: (
    args: {|
      riderEngagementRequest: RiderEngagementRequestType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  updateDriverEngagement: (
    args: {|
      driverEngagementRequest: DriverEngagementRequestType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  updateCourierEngagement: (
    args: {|
      courierEngagementRequest: CourierEngagementRequestType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<void>,
  changeUserCityAndFlowType: (
    args: {|
      changeUserCityAndFlowTypeRequest: ChangeUserCityAndFlowTypeRequestType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<ChangeUserCityAndFlowTypeResponseType[]>,
  updateLoginEligibility: (
    args: {|
      userUuid: UUIDType,
      updateLoginEligibilityRequest: UpdateLoginEligibilityRequestType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<UserType>,
};
export type HealthStatusType = {|
  ok: boolean,
  message?: string,
|};
export type FlameOptionsType = {|
  durationSeconds: number,
  endpoint?: string,
  minLatencyMS?: number,
  maxLatencyMS?: number,
|};
export type MetaType = {
  health: () => Promise<HealthStatusType>,
  thriftIDL: () => Promise<string>,
  profile: (
    args: {|
      seconds: number,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<string>,
  flame: (
    args: {|
      options: FlameOptionsType,
    |},
    context: Context,
    info: GraphQLResolveInfo,
    options: ?OptionsType
  ) => Promise<string>,
};
